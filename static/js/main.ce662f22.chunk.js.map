{"version":3,"sources":["Components/Header/Header.js","Components/LocationSearch/LocationSearch.js","Components/DayCard/DayCard.js","Components/DayList/DayList.js","Components/Forecast/Forecast.js","App.js","reportWebVitals.js","index.js"],"names":["Header","containerStyles","width","maxWidth","LocationSearch","searchfield","searchChange","className","id","label","placeholder","style","onChange","currentDate","Date","calcDay","i","today","getDay","targetDay","timestampToData","timestamp","date","hours","getHours","getMinutes","substr","DayCard","day","dayTemp","tempMin","tempMax","desc","icon","sunrise","sunset","humidity","wind_speed","moon_phase","useState","isActive","setActive","title","footer","onClick","faAngleUp","faAngleDown","src","alt","Math","round","DayList","props","loading","Loader","city","toUpperCase","responseObj","daily","slice","map","x","temp","min","max","main","weather","description","e","Forecast","setResponseObj","setLoading","setCity","lat","lon","getCoordinates","location","fetch","process","then","response","json","ok","Error","results","locations","latLng","lng","catch","err","console","log","message","getForecast","isLoading","variant","App","onSearchChange","event","setState","target","value","state","this","locationName","toLowerCase","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ce662f22.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Header.css';\r\n\r\nexport const Header = () => {\r\n    return (\r\n        <header>\r\n            <h1>My Forecast App</h1>\r\n            <h2>A simple weather app by Daniel Hersey</h2>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport { Input } from 'react-rainbow-components';\r\nimport './LocationSearch.css';\r\n\r\nconst containerStyles = {\r\n    width: 700,\r\n    maxWidth: 700,\r\n};\r\n\r\nexport const LocationSearch = ({ searchfield, searchChange }) => {\r\n    return (\r\n        <div className=\"center\">\r\n            <Input \r\n                id=\"input-component-1\"\r\n                label=\"Location\"\r\n                placeholder=\"Search Location\"\r\n                style={containerStyles}\r\n                className=\"rainbow-m-verticle_x-large rainbow-p-horizontal_medium rainbow-m_auto\"\r\n                onChange = {searchChange}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LocationSearch;","import React, { useState } from 'react';\r\nimport { Card } from 'react-rainbow-components';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faAngleDown, faAngleUp } from '@fortawesome/free-solid-svg-icons';\r\nimport './DayCard.css';\r\n\r\nconst currentDate = new Date();\r\nfunction calcDay(i){//i = how many days difference from the current day\r\n    const today = currentDate.getDay() //Today is Wednesday, so today = 3\r\n    let targetDay = 0;\r\n    if(i === 0){\r\n        return 'Today';\r\n    }\r\n    else{\r\n        targetDay = today + i;\r\n    }\r\n\r\n    if(targetDay > 6){\r\n        targetDay = targetDay - 7;\r\n    }\r\n\r\n    switch(targetDay){\r\n        case(0):{\r\n            return 'Sunday';\r\n        }\r\n        case(1):{\r\n            return 'Monday';\r\n        }\r\n        case(2):{\r\n            return 'Tuesday';\r\n        }\r\n        case(3):{\r\n            return 'Wednesday';\r\n        }\r\n        case(4):{\r\n            return 'Thursday';\r\n        }\r\n        case(5):{\r\n            return 'Friday';\r\n        }\r\n        case(6):{\r\n            return 'Saturday';\r\n        }\r\n        default: return targetDay;\r\n    }\r\n}\r\n\r\nfunction timestampToData(timestamp){\r\n    let date = new Date(timestamp * 1000);\r\n    let hours = date.getHours();\r\n    let minutes = \"0\" + date.getMinutes();\r\n\r\n    if(hours > 12){\r\n        hours = hours - 12;\r\n    }\r\n\r\n    return hours + ':' + minutes.substr(-2);\r\n}\r\n\r\nconst DayCard = ({ day, dayTemp, tempMin, tempMax, desc, icon, sunrise, sunset, humidity, wind_speed, moon_phase }) => {\r\n\r\n    const [isActive, setActive] = useState(false);\r\n\r\n    const toggleClass = () => {\r\n        setActive(!isActive);\r\n    };\r\n\r\n    return (\r\n        <div className=\"rainbow-m-around_large\">\r\n            <Card\r\n                title={calcDay(day)}\r\n                footer={\r\n                    <div className=\"rainbow-align-content_space-between\">\r\n                        <div className=\"pointer\" onClick={toggleClass}>\r\n                            <div className=\"rainbow-flex\">\r\n                                {isActive ? 'less' : 'more'} \r\n                            </div>\r\n                            <FontAwesomeIcon icon={isActive ? faAngleUp : faAngleDown}/>\r\n                        </div>\r\n                        <div className={isActive ? '' : 'none'}>\r\n                            <ul>\r\n                                <div className=\"floatLeft\">\r\n                                    <li>Sunrise</li>\r\n                                    <li>Sunset</li>\r\n                                    <li>Humidity</li>\r\n                                    <li>Wind Speed</li>\r\n                                    <li>Moon Phase</li>\r\n                                </div>\r\n                                <div className=\"floatRight\">\r\n                                    <li>{timestampToData(sunrise)}am</li>\r\n                                    <li>{timestampToData(sunset)}pm</li>\r\n                                    <li>{humidity}%</li>\r\n                                    <li>{wind_speed}mph</li>\r\n                                    <li>{moon_phase}</li>\r\n                                </div>\r\n                            </ul>\r\n                        </div>\r\n                    </div>\r\n                }\r\n                >\r\n                <div className=\"rainbow-p-around_xx-large rainbow-align-content_center rainbow-flex_column\">\r\n                    <div className=\"day-info-column\">\r\n                        <img src={`http://openweathermap.org/img/wn/${icon}@2x.png`} alt=\"weather icon\"/>\r\n                        <h3 className=\"rainbow-p-top_large rainbow-font-size-heading_small\">\r\n                            {Math.round(dayTemp)}°\r\n                        </h3>\r\n                        {desc}\r\n                    </div>\r\n                    <div className=\"temp-container\">\r\n                        <div className=\"tempMin\">\r\n                            Low: {Math.round(tempMin)}°   \r\n                        </div>\r\n                        <div className=\"tempMax\">\r\n                            High: {Math.round(tempMax)}° \r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </Card>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DayCard;","import React from 'react';\r\nimport DayCard from '../DayCard/DayCard';\r\nimport {\r\n    Loader\r\n} from './DayList.css';\r\n\r\n//<DayCard day={} dayTemp=\"297\" tempMin=\"290\" tempMax=\"299\" main=\"Rain\" desc=\"light rain\" icon=\"10d\"/>\r\nconst DayList = (props) => {\r\n    if(props.loading === false){\r\n        //console.log(props.responseObj.daily[0]);\r\n        try{\r\n            return (\r\n                <>\r\n                    <div className=\"centerTitle\">\r\n                        <br></br>\r\n                        <h1>\r\n                            {props.city.toUpperCase()}\r\n                        </h1>\r\n                    </div>\r\n                    <div className=\"container\">\r\n                        {\r\n                            props.responseObj.daily.slice(0, 5).map((x, i) => {\r\n                                return(\r\n                                    <DayCard\r\n                                        key = {i}\r\n                                        day={i}\r\n                                        tempMin={props.responseObj.daily[i].temp.min}\r\n                                        dayTemp={props.responseObj.daily[i].temp.day}\r\n                                        tempMax={props.responseObj.daily[i].temp.max}\r\n                                        main={props.responseObj.daily[i].weather[0].main}\r\n                                        desc={props.responseObj.daily[i].weather[0].description}\r\n                                        icon={props.responseObj.daily[i].weather[0].icon}\r\n                                        sunrise={props.responseObj.daily[i].sunrise}\r\n                                        sunset={props.responseObj.daily[i].sunset}\r\n                                        humidity={props.responseObj.daily[i].humidity}\r\n                                        wind_speed={props.responseObj.daily[i].wind_speed}\r\n                                        moon_phase={props.responseObj.daily[i].moon_phase}\r\n                                    />\r\n                                );\r\n                            })\r\n                        }\r\n                    </div>\r\n                </>\r\n            );\r\n        } catch(e) {\r\n            //console.log(e);\r\n            return null;\r\n        }\r\n    } else{\r\n        return (\r\n            <div className={Loader}></div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default DayList;\r\n","import React, { useState } from 'react';\r\nimport { Button } from 'react-rainbow-components';\r\nimport DayList from '../DayList/DayList';\r\nimport './Forecast.css';\r\n\r\nconst Forecast = (props) => {\r\n\r\n    let [responseObj, setResponseObj] = useState({});\r\n    let [loading, setLoading] = useState(false); \r\n    let [city, setCity] = useState('');\r\n\r\n    let lat = 0;\r\n    let lon = 0;\r\n\r\n    //https://open.mapquestapi.com/geocoding/v1/address?key=zeWCKE6hjSV1w8yfFvwdVF347A219A0G&location=Boston\r\n    function getCoordinates(location){\r\n        fetch(`https://open.mapquestapi.com/geocoding/v1/address?key=${process.env.REACT_APP_MAPQUEST_API_KEY}&location=${location}`)\r\n            .then(response => response.json())\r\n            .then(response => {\r\n                if(response.ok){\r\n                    throw new Error()\r\n                }\r\n                \r\n                lat = response.results[0].locations[0].latLng.lat;\r\n                lon = response.results[0].locations[0].latLng.lng;\r\n                setCity(location);\r\n                getForecast(lat, lon);\r\n            })\r\n            .catch(err => {\r\n                setLoading(false);\r\n                console.log(err.message);\r\n            })\r\n    }\r\n\r\n    function getForecast(lat, lon) {\r\n\r\n        setResponseObj({});\r\n        setLoading(true);\r\n\r\n        fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&units=imperial&appid=${process.env.REACT_APP_WEATHER_API_KEY}`)\r\n\t\t\t.then(response => response.json())\r\n\t\t\t.then(response => {\r\n                if(response.ok){\r\n                    throw new Error()\r\n                }\r\n                \r\n                setResponseObj(response);\r\n                setLoading(false);\r\n            })\r\n            .catch(err => {\r\n                setLoading(false);\r\n                console.log(err.message);\r\n            })\r\n    }\r\n\r\n    if(loading === true){\r\n        return(\r\n            <div>\r\n                <Button isLoading id=\"loadingButton\" label=\"Search Location\" variant=\"outline-brand\" className=\"rainbow-m-around_medium\" />\r\n            </div>\r\n        )\r\n    }else{\r\n        return (\r\n            <div>\r\n                <Button onClick={() => getCoordinates(props.location)} id=\"button\" label=\"Search Location\" variant=\"outline-brand\" className=\"rainbow-m-around_medium\" />\r\n                <DayList \r\n                    responseObj = {responseObj}\r\n                    loading = {loading}\r\n                    city = {city}\r\n                    />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Forecast;","import React, { Component } from 'react';\nimport Header from './Components/Header/Header';\nimport LocationSearch from './Components/LocationSearch/LocationSearch';\nimport Forecast from './Components/Forecast/Forecast';\nimport './App.css';\n\nclass App extends Component{\n\t\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\tsearchfield: ''\n\t\t}\n\t}\n\n\tonSearchChange = (event) => {\n\t\tthis.setState({ searchfield: event.target.value });\n\t}\n\n\tonClearSearch(){\n\t\tthis.setState({ searchfield: '' });\n\t}\n\n\trender(){\n\t\tconst { searchfield } = this.state;\n\t\tconst locationName = searchfield.toLowerCase()\n\t\treturn (\n\t\t\t<div className=\"centered\">\n\t\t\t\t<Header />\n\t\t\t\t<LocationSearch searchChange = {this.onSearchChange}/>\n\t\t\t\t<div>\n\t\t\t\t\t<Forecast location={locationName}/>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}